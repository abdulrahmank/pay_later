// Code generated by MockGen. DO NOT EDIT.
// Source: ./dao/merchant_dao.go

// Package dao is a generated GoMock package.
package dao

import (
	model "github.com/abdulrahmank/pay_later/model"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockMerchantDao is a mock of MerchantDao interface
type MockMerchantDao struct {
	ctrl     *gomock.Controller
	recorder *MockMerchantDaoMockRecorder
}

// MockMerchantDaoMockRecorder is the mock recorder for MockMerchantDao
type MockMerchantDaoMockRecorder struct {
	mock *MockMerchantDao
}

// NewMockMerchantDao creates a new mock instance
func NewMockMerchantDao(ctrl *gomock.Controller) *MockMerchantDao {
	mock := &MockMerchantDao{ctrl: ctrl}
	mock.recorder = &MockMerchantDaoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockMerchantDao) EXPECT() *MockMerchantDaoMockRecorder {
	return m.recorder
}

// SaveMerchant mocks base method
func (m *MockMerchantDao) SaveMerchant(name string, discount int) error {
	ret := m.ctrl.Call(m, "SaveMerchant", name, discount)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveMerchant indicates an expected call of SaveMerchant
func (mr *MockMerchantDaoMockRecorder) SaveMerchant(name, discount interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveMerchant", reflect.TypeOf((*MockMerchantDao)(nil).SaveMerchant), name, discount)
}

// UpdateMerchant mocks base method
func (m *MockMerchantDao) UpdateMerchant(name string, discount int) error {
	ret := m.ctrl.Call(m, "UpdateMerchant", name, discount)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateMerchant indicates an expected call of UpdateMerchant
func (mr *MockMerchantDaoMockRecorder) UpdateMerchant(name, discount interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateMerchant", reflect.TypeOf((*MockMerchantDao)(nil).UpdateMerchant), name, discount)
}

// GetMerchantDetails mocks base method
func (m *MockMerchantDao) GetMerchantDetails(name string) *model.Merchant {
	ret := m.ctrl.Call(m, "GetMerchantDetails", name)
	ret0, _ := ret[0].(*model.Merchant)
	return ret0
}

// GetMerchantDetails indicates an expected call of GetMerchantDetails
func (mr *MockMerchantDaoMockRecorder) GetMerchantDetails(name interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMerchantDetails", reflect.TypeOf((*MockMerchantDao)(nil).GetMerchantDetails), name)
}
